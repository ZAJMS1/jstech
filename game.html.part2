                    title.style.marginBottom = '30px';
                    content.appendChild(title);
                    
                    const subtitle = document.createElement('h2');
                    subtitle.textContent = 'You have escaped to freedom';
                    subtitle.style.fontSize = '24px';
                    subtitle.style.marginBottom = '50px';
                    subtitle.style.fontWeight = 'normal';
                    content.appendChild(subtitle);
                    
                    const credits = document.createElement('div');
                    credits.style.fontSize = '18px';
                    credits.style.lineHeight = '1.8';
                    credits.style.textAlign = 'center';
                    credits.innerHTML = 'Thank you for playing<br><br>A Three.js Experiment';
                    content.appendChild(credits);
                    
                    const restart = document.createElement('button');
                    restart.textContent = 'Play Again';
                    Object.assign(restart.style, {
                        marginTop: '50px',
                        padding: '15px 30px',
                        backgroundColor: '#446688',
                        color: 'white',
                        border: 'none',
                        borderRadius: '5px',
                        cursor: 'pointer',
                        fontSize: '16px'
                    });
                    
                    restart.addEventListener('click', function() {
                        // Smooth fade-out before reload
                        creditsContainer.style.opacity = '0';
                        setTimeout(() => {
                            location.reload();
                        }, 400);
                    });
                    
                    content.appendChild(restart);
                    creditsContainer.appendChild(content);
                    document.body.appendChild(creditsContainer);
                    
                    // Force reflow and fade in, with a slight delay for drama
                    setTimeout(() => {
                        creditsContainer.style.opacity = '1';
                    }, 100);
                }

                // Call resetCharacterPose when cutscene ends
                document.addEventListener('keydown', function(event) {
                    if (!cutsceneActive) return;
                    
                    if (event.code === 'Space' || event.code === 'Enter' || event.code === 'Escape') {
                        cutsceneActive = false;
                        resetCharacterPose();
                        
                        // Hide dialogue box
                        const dialogueBox = document.getElementById('dialogue-box');
                        if (dialogueBox) dialogueBox.style.display = 'none';
                        
                        // Re-enable controls
                        controls.lock();
                    }
                });

                // Make character turn head to the opposite direction
                function turnHeadOtherway() {
                    // Don't animate if we're not in a cutscene anymore
                    if (!cutsceneActive) return;
                    
                    // Save initial head rotation
                    const initialHeadRotX = player.headGroup ? player.headGroup.rotation.x : 0;
                    const initialHeadRotY = player.headGroup ? player.headGroup.rotation.y : 0;
                    const initialHeadPosZ = player.headGroup ? player.headGroup.position.z : 0;
                    
                    // Target rotation (looking upward while returning to face front)
                    const targetHeadRotX = -0.2; // Tilt slightly upward toward sky
                    const targetHeadRotY = 0;    // Return to facing forward
                    
                    // Duration of animation in milliseconds
                    const duration = 1000;
                    
                    // Animation start time
                    const startTime = Date.now();
                    
                    // Animation function
                    function animateHeadTurn() {
                        // Calculate progress (0 to 1)
                        const elapsed = Date.now() - startTime;
                        const progress = Math.min(elapsed / duration, 1);
                        
                        // Easing function for smooth animation
                        const eased = 1 - Math.pow(1 - progress, 3); // Cubic ease out
                        
                        // Apply head rotation (change X rotation to look up, and Y to face front)
                        if (player.headGroup) {
                            player.headGroup.rotation.x = initialHeadRotX + (targetHeadRotX - initialHeadRotX) * eased;
                            player.headGroup.rotation.y = initialHeadRotY + (targetHeadRotY - initialHeadRotY) * eased;
                            player.headGroup.position.z = initialHeadPosZ;
                        }
                        
                        // Continue animation if not complete and still in cutscene
                        if (progress < 1 && cutsceneActive) {
                            requestAnimationFrame(animateHeadTurn);
                        }
                    }
                    
                    // Start the animation
                    animateHeadTurn();
                }

                // Add event listeners for keyboard inputs
                document.addEventListener('keydown', function(e) {
                    state.keysPressed[e.code] = true;
                    state.lastInputTime = Date.now();
                    
                    // Toggle inventory on E key
                    if (e.code === 'KeyE') {
                        toggleInventory();
                    }
                    
                    // Handle Escape key for pause menu
                    if (e.code === 'Escape') {
                        togglePauseMenu();
                    }
                    
                    // Handle camera mode switch with Tab key
                    if (e.code === 'Tab') {
                        e.preventDefault(); // Prevent tab from changing focus
                        state.cameraMode = state.cameraMode === 'free' ? 'shiftlock' : 'free';
                        console.log(`Camera mode switched to: ${state.cameraMode}`);
                    }
                });

                // Initialize event listeners
                function initEventListeners() {
                    // Existing code for event listeners
                    
                    // Add pause menu button listeners
                    document.getElementById('resume-game').addEventListener('click', function() {
                        togglePauseMenu(false);
                    });
                    
                    document.getElementById('restart-game').addEventListener('click', function() {
                        window.location.reload();
                    });
                    
                    document.getElementById('save-quit').addEventListener('click', function() {
                        saveGameAndQuit();
                    });
                    
                    document.getElementById('return-home').addEventListener('click', function() {
                        window.location.href = 'index.html';
                    });
                }

                // Toggle pause menu
                function togglePauseMenu(forcedState) {
                    const pauseMenu = document.getElementById('pause-menu');
                    const isPaused = forcedState !== undefined ? forcedState : pauseMenu.style.display === 'none';
                    
                    if (isPaused) {
                        pauseMenu.style.display = 'flex';
                        // Pause game
                        state.gamePaused = true;
                        
                        // If pointer is locked, unlock it
                        if (document.pointerLockElement) {
                            document.exitPointerLock();
                        }
                    } else {
                        pauseMenu.style.display = 'none';
                        // Resume game
                        state.gamePaused = false;
                        
                        // Re-lock pointer if needed
                        if (controlsEnabled) {
                            renderer.domElement.requestPointerLock();
                        }
                    }
                }

                // Save game and quit function
                function saveGameAndQuit() {
                    // Get current page URL
                    const currentPage = window.location.pathname.split('/').pop();
                    
                    // Log debugging info
                    console.log('Saving game from page:', currentPage);
                    console.log('Player position:', player.position);
                    
                    try {
                        // Create game data to save
                        const gameData = {
                            currentPage,
                            position: {
                                x: player.position.x,
                                y: player.position.y,
                                z: player.position.z
                            },
                            cameraRotation: {
                                x: state.cameraRotation.x,
                                y: state.cameraRotation.y
                            },
                            // Ensure gameProgress is an object
                            gameProgress: (typeof gameProgress === 'object' && gameProgress !== null) 
                                ? gameProgress 
                                : {
                                    hasBackpack: false,
                                    storyPhase: 'intro',
                                    checkpointTriggered: false,
                                    borderReached: false
                                },
                            inventoryItems: state.inventory.items || []
                        };
                        
                        console.log('Game data prepared:', JSON.stringify(gameData).substring(0, 200) + '...');
                        
                        // Call API to save game
                        fetch('/api/save-game', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(gameData)
                        })
                        .then(response => {
                            console.log('Save response status:', response.status);
                            if (!response.ok) {
                                throw new Error(`Server responded with status: ${response.status}`);
                            }
                            return response.json();
                        })
                        .then(data => {
                            if (data.success) {
                                console.log('Game saved successfully');
                                // Redirect to home page
                                window.location.href = 'index.html';
                            } else {
                                console.error('Failed to save game:', data.error);
                                alert('Failed to save game: ' + (data.error || 'Unknown error'));
                            }
                        })
                        .catch(error => {
                            console.error('Error saving game:', error);
                            alert('Error saving game. Please try again. Error: ' + error.message);
                        });
                    } catch (err) {
                        console.error('Exception in saveGameAndQuit:', err);
                        alert('Error preparing save data: ' + err.message);
                    }
                }

                // Set player position from saved data if available
                if (savedPosition) {
                    player.position.set(savedPosition.x, savedPosition.y, savedPosition.z);
                    console.log('Set player position from saved data');
                }

                // Clear save data when game ends
                function clearSaveOnGameEnd() {
                    // Call API to delete saved game
                    fetch('/api/delete-save', {
                        method: 'DELETE'
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            console.log('Save data cleared on game end');
                        }
                    })
                    .catch(error => {
                        console.error('Error clearing save data:', error);
                    });
                }
                
                // Add listeners to clear save on game end
                // This only works if there are links to success.html or failure pages
                document.addEventListener('click', function(e) {
                    // If the clicked element is a link that navigates to success.html or other end-game pages
                    if (e.target.tagName === 'A') {
                        const href = e.target.getAttribute('href');
                        if (href && (
                            href.includes('success.html') || 
                            href.includes('game-over.html') || 
                            href.includes('failure.html')
                        )) {
                            clearSaveOnGameEnd();
                        }
                    }
                });
            } catch (error) {
                debugElement.textContent = "Error: " + error.message;
                console.error(error);
            }
        };

    </script>
</body>
</html>
