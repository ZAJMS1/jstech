<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dystopian Escape - Sneak</title>
    <link rel="stylesheet" href="css/styles.css">
    <script type="importmap">
        {
            "imports": {
                "three": "https://unpkg.com/three@0.158.0/build/three.module.js",
                "three/addons/": "https://unpkg.com/three@0.158.0/examples/jsm/"
            }
        }
    </script>
    <script src="js/save-system.js"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: 'Courier New', monospace;
            background-color: #0a0a0a;
            color: #eee;
            overflow: hidden;
        }
        
        #pause-menu {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            z-index: 1000;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .menu-container {
            background-color: rgba(30, 30, 40, 0.9);
            border: 2px solid #73a1ff;
            border-radius: 10px;
            padding: 30px;
            width: 350px;
            box-shadow: 0 0 20px #73a1ff;
            text-align: center;
        }
        
        .menu-container h2 {
            color: #73a1ff;
            font-size: 2rem;
            margin-bottom: 30px;
            text-transform: uppercase;
            letter-spacing: 0.2rem;
            text-shadow: 0 0 10px #73a1ff;
        }
        
        .menu-options {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        
        .menu-options button {
            padding: 12px;
            background-color: rgba(40, 40, 60, 0.9);
            border: 1px solid #73a1ff;
            color: #ccc;
            cursor: pointer;
            font-family: 'Courier New', monospace;
            font-size: 1.1rem;
            transition: all 0.2s ease;
            border-radius: 5px;
        }
        
        .menu-options button:hover {
            background-color: rgba(60, 60, 100, 0.9);
            color: #fff;
            box-shadow: 0 0 10px rgba(115, 161, 255, 0.5);
            transform: translateY(-2px);
        }
    </style>
</head>
<body>
    <div id="game-container">
        <div id="loading-screen">
            <div class="loading-text">Loading Dystopian World - Sneak Mission...</div>
        </div>
        
        <div id="pause-menu" style="display: none;">
            <div class="menu-container">
                <h2>Game Paused</h2>
                <div class="menu-options">
                    <button id="resume-game">Resume Game</button>
                    <button id="restart-game">Start Over</button>
                    <button id="save-quit">Save & Quit</button>
                    <button id="return-home">Return to Home</button>
                </div>
            </div>
        </div>

        <div id="info">
            <div class="controls-info">
                <p>WASD - Move | SPACE - Jump | MOUSE - Look | ESC - Pause</p>
            </div>
        </div>
        <div id="debug"></div>
    </div>
    
    <script type="module">
        import * as THREE from 'three';
        
        window.onload = function() {
            // Initialize saved position
            let savedPosition = null;
            
            try {
                // Set up scene
                const scene = new THREE.Scene();
                scene.background = new THREE.Color(0x111122);
                
                // Initialize camera
                const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
                camera.position.set(0, 2, 5);
                
                // Initialize renderer
                const renderer = new THREE.WebGLRenderer({ antialias: true });
                renderer.setSize(window.innerWidth, window.innerHeight);
                renderer.shadowMap.enabled = true;
                document.getElementById('game-container').appendChild(renderer.domElement);
                
                // Simple ground plane
                const groundGeometry = new THREE.PlaneGeometry(50, 50);
                const groundMaterial = new THREE.MeshStandardMaterial({ color: 0x333333 });
                const ground = new THREE.Mesh(groundGeometry, groundMaterial);
                ground.rotation.x = -Math.PI / 2;
                ground.receiveShadow = true;
                scene.add(ground);
                
                // Add lighting
                const ambientLight = new THREE.AmbientLight(0x404040);
                scene.add(ambientLight);
                
                const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
                directionalLight.position.set(10, 20, 10);
                directionalLight.castShadow = true;
                scene.add(directionalLight);
                
                // Game state object
                const state = {
                    gamePaused: false,
                    cameraRotation: { x: 0, y: 0 }
                };
                
                // Player object
                const player = {
                    position: new THREE.Vector3(0, 1, 0)
                };
                
                // Controls enabled flag
                let controlsEnabled = true;
                
                // Setup pause menu
                const pauseMenu = document.getElementById('pause-menu');
                document.addEventListener('keydown', (e) => {
                    if (e.key === 'Escape') {
                        togglePauseMenu();
                    }
                });
                
                document.getElementById('resume-game').addEventListener('click', () => {
                    togglePauseMenu(false);
                });
                
                document.getElementById('restart-game').addEventListener('click', () => {
                    window.location.href = '/game';
                });
                
                document.getElementById('return-home').addEventListener('click', () => {
                    window.location.href = '/';
                });
                
                // Event listener for save and quit button
                document.getElementById('save-quit').addEventListener('click', saveGameAndQuit);
                
                // Save and quit function
                function saveGameAndQuit() {
                    // Get current page URL
                    const currentPage = window.location.pathname.split('/').pop();
                    
                    // Log debugging info
                    console.log('Saving game from page:', currentPage);
                    console.log('Player position:', player.position);
                    
                    try {
                        // Create game data to save
                        const gameData = {
                            currentPage,
                            position: {
                                x: player.position.x,
                                y: player.position.y,
                                z: player.position.z
                            },
                            cameraRotation: {
                                x: state.cameraRotation.x,
                                y: state.cameraRotation.y
                            },
                            // Ensure gameProgress is an object
                            gameProgress: {},
                            inventoryItems: []
                        };
                        
                        // Call the saveGameAndQuit function from save-system.js
                        if (typeof window.saveGameAndQuit === 'function') {
                            window.saveGameAndQuit(gameData);
                        } else {
                            console.error('saveGameAndQuit function not found in global scope');
                            alert('Error saving game: Save function not available');
                        }
                    } catch (error) {
                        console.error('Error preparing save data:', error);
                        alert('Error saving game. Please try again.');
                    }
                }
                
                function togglePauseMenu(forcedState) {
                    const isPaused = forcedState !== undefined ? forcedState : !state.gamePaused;
                    
                    if (isPaused) {
                        pauseMenu.style.display = 'flex';
                        state.gamePaused = true;
                    } else {
                        pauseMenu.style.display = 'none';
                        state.gamePaused = false;
                    }
                }
                
                // Lock pointer if needed
                function lockPointer() {
                    if (controlsEnabled) {
                        renderer.domElement.requestPointerLock();
                    }
                }
                
                // Animation loop
                function animate() {
                    requestAnimationFrame(animate);
                    
                    if (!state.gamePaused) {
                        renderer.render(scene, camera);
                    }
                }
                
                // Hide loading screen when ready
                const loadingScreen = document.getElementById('loading-screen');
                loadingScreen.style.display = 'none';
                
                // Start animation loop
                animate();
                
                console.log('Sneak mission initialized');
                
            } catch (error) {
                const debugElement = document.getElementById('debug');
                debugElement.textContent = "Error: " + error.message;
                console.error(error);
            }
        };
    </script>
</body>
</html>
